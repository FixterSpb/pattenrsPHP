
У меня всего два прошлых проекта и оба учебные:
1) Из курса "Базовый курс PHP " - функциональное программирование. И весь code review сводится к антипаттерну "Спагетти-код";
2) Из курса "Профессиональная веб-разработка на PHP". Из разбора данного проекта могу выделить следующие недостатки.

Т.к. проект учебный, то ни о какой валидации данных речь не шла. Вероятно это можно отнести к "Слепой вере".
Способ от этого избавиться - добавить валидацию данных.

В связи с ограниченным сроком выполнения работы и периодической его переделкой возникли еще некоторые недостатки.
Например, в предыдущих версиях проекта при создании контроллера в конструктор передавался экземпляр рендера:

class Controller{

    ...
    protected $render;

    function __construct(IRender $render)
    {
        $this->render = $render;
    }
}

Однако, позже, конструктор был упразднен, но создание экземпляра контроллеров не было исправлено:

class App
{
    ...

    public function runController()
    {
        $this->controller = $this->request->getControllerName() ?: 'product';
        $this->action = $this->request->getActionName();

        $controllerClass = $this->config['controllers_namespaces'] . ucfirst($this->controller) . "Controller";

        if (class_exists($controllerClass)) {
            $controller = new $controllerClass(new Render()); // то самое место.
            $controller->runAction($this->action);
        } else {
            echo "Не правильный контроллер";
        }
    }

    ...
}

Решение, думаю, очевидно:  $controller = new $controllerClass();
Не уверен, что это антипаттерн...

Честно говоря, подобных косяков в проекте хватает...
Единственное решение - пройтись внимательно по проекту и удалить лишнее.

Кроме того, возможно, есть и "Изобретение квадратного колеса":
if (!function_exists('array_get')){
    function array_get(array $arr, $key, $default = null){
        return isset($arr[$key]) && $arr[$key] ? htmlspecialchars(strip_tags($arr[$key])) : $default;
    }

}
Как минимум данный функционал необходимо перенести в клсасс Request.
C другой стороны, вероятно, существуют более эффективные решения безопасного получения данных из GET и POST запросов,
но я с ними не знаком.


Перечисленные антипаттерны относятся к а антипаттернам разработки.

Что касается антипаттернов Архитектуры. Учитывая отсутствие опыта, я вряд ли смогу здесь их выделить.

Можно было бы предположить наличие антипаттерна "Сплошное одиночество", однако использование синглтона в
данном случае позволяет избавиться от лишних зависимостей и сконцентрировать их в конфиге. Что в
свою очередь, думаю, упрощает сопровождение и расширекние проекта.